{"ast":null,"code":"var _jsxFileName = \"C:\\\\IntelliJProjects\\\\FullStackProjects\\\\RealTimeChatBot\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Connect to the backend server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]); // Store chat messages\n  const [input, setInput] = useState(''); // Store the input message\n\n  // Listen for incoming messages from the server\n  useEffect(() => {\n    socket.on('message', msg => {\n      const botMessage = {\n        text: msg,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n\n      // Scroll to the bottom of the chat box\n      const chatBox = document.querySelector('.chat-box');\n      chatBox.scrollTop = chatBox.scrollHeight;\n    });\n    return () => {\n      socket.off('message');\n    };\n  }, [messages]); // Add messages as dependency to trigger scroll on new message\n\n  // Function to send user messages\n  const sendMessage = () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user',\n        timestamp: new Date()\n      }; // Add user message with timestamp\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      socket.emit('message', input); // Send the message to the server\n      setInput(''); // Clear the input field\n    }\n  };\n\n  // Handle \"Enter\" key press to send messages\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(); // Send the message if Enter is pressed\n    }\n  };\n\n  // Function to format timestamp\n  const formatTimestamp = timestamp => {\n    return new Date(timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-timestamp\",\n          children: formatTimestamp(msg.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress // Press Enter to send\n        ,\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","App","_s","messages","setMessages","input","setInput","on","msg","botMessage","text","sender","timestamp","Date","prevMessages","chatBox","document","querySelector","scrollTop","scrollHeight","off","sendMessage","trim","userMessage","emit","handleKeyPress","e","key","formatTimestamp","toLocaleTimeString","hour","minute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","target","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/IntelliJProjects/FullStackProjects/RealTimeChatBot/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Connect to the backend server\nconst socket = io('http://localhost:5000');\n\nfunction App() {\n    const [messages, setMessages] = useState([]);  // Store chat messages\n    const [input, setInput] = useState('');        // Store the input message\n\n    // Listen for incoming messages from the server\n    useEffect(() => {\n        socket.on('message', (msg) => {\n            const botMessage = { text: msg, sender: 'bot', timestamp: new Date() };\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n            // Scroll to the bottom of the chat box\n            const chatBox = document.querySelector('.chat-box');\n            chatBox.scrollTop = chatBox.scrollHeight;\n        });\n\n        return () => {\n            socket.off('message');\n        };\n    }, [messages]);  // Add messages as dependency to trigger scroll on new message\n\n    // Function to send user messages\n    const sendMessage = () => {\n        if (input.trim()) {\n            const userMessage = { text: input, sender: 'user', timestamp: new Date() };  // Add user message with timestamp\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\n            socket.emit('message', input);  // Send the message to the server\n            setInput('');  // Clear the input field\n        }\n    };\n\n    // Handle \"Enter\" key press to send messages\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage();  // Send the message if Enter is pressed\n        }\n    };\n\n    // Function to format timestamp\n    const formatTimestamp = (timestamp) => {\n        return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <h1>Real-Time Chatbot</h1>\n\n            {/* Chat box to display messages */}\n            <div className=\"chat-box\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`chat-message ${msg.sender}`}>\n                        <span className=\"message-text\">{msg.text}</span>\n                        <span className=\"message-timestamp\">{formatTimestamp(msg.timestamp)}</span>\n                    </div>\n                ))}\n            </div>\n\n            {/* Input field to send messages */}\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}  // Press Enter to send\n                    placeholder=\"Type a message...\"\n                    className=\"chat-input\"\n                />\n                <button onClick={sendMessage} className=\"send-button\">Send</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}