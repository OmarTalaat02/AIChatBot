{"ast":null,"code":"var _jsxFileName = \"C:\\\\IntelliJProjects\\\\FullStackProjects\\\\RealTimeChatBot\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { loadFull } from \"tsparticles\";\nimport './App.css';\n\n// Connect to the backend server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]); // Store chat messages\n  const [input, setInput] = useState(''); // Store the input message\n  const messagesEndRef = useRef(null); // Ref for auto-scrolling\n\n  // Function to scroll to the latest message\n  const scrollToLatestMessage = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // Scroll to the latest message whenever messages are updated\n  useEffect(() => {\n    scrollToLatestMessage();\n  }, [messages]);\n\n  // Fetch chat history and session management\n  useEffect(() => {\n    const storedSessionID = localStorage.getItem('session_id');\n    if (storedSessionID) {\n      console.log('Resuming session with ID:', storedSessionID);\n      socket.emit('resumeSession', storedSessionID); // Notify backend to resume session\n    } else {\n      console.log('No session found, starting a new session');\n      socket.emit('newSession'); // Start a new session\n    }\n    socket.on('sessionStarted', newSessionID => {\n      console.log('New session started with ID:', newSessionID);\n      localStorage.setItem('session_id', newSessionID); // Save session ID in localStorage\n    });\n    socket.on('chatHistory', history => {\n      console.log('Chat history received:', history);\n      const formattedHistory = history.map(msg => ({\n        ...msg,\n        timestamp: new Date(msg.timestamp) // Convert string to Date object\n      }));\n      setMessages(formattedHistory); // Update state with chat history\n    });\n    return () => {\n      socket.off('sessionStarted');\n      socket.off('chatHistory');\n    };\n  }, []);\n\n  // Listen for incoming messages from the server\n  useEffect(() => {\n    socket.on('message', msg => {\n      console.log('Message received from server:', msg);\n      const botMessage = {\n        text: msg,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    });\n    return () => {\n      socket.off('message');\n    };\n  }, []);\n\n  // Particle animation configuration\n  useEffect(() => {\n    async function loadParticles() {\n      try {\n        const tsParticles = await import(\"tsparticles-engine\"); // Import engine\n        const {\n          loadFull\n        } = await import(\"tsparticles\");\n        await loadFull(tsParticles.tsParticles); // Use matching engine and particles\n        tsParticles.tsParticles.load(\"particles-js\", {\n          particles: {\n            number: {\n              value: 100\n            },\n            color: {\n              value: \"#ffffff\"\n            },\n            shape: {\n              type: \"circle\"\n            },\n            opacity: {\n              value: 0.5\n            },\n            size: {\n              value: 3\n            },\n            move: {\n              enable: true,\n              speed: 1,\n              direction: \"none\",\n              outModes: {\n                default: \"out\"\n              }\n            }\n          },\n          interactivity: {\n            events: {\n              onHover: {\n                enable: true,\n                mode: \"repulse\"\n              },\n              onClick: {\n                enable: true,\n                mode: \"push\"\n              }\n            },\n            modes: {\n              repulse: {\n                distance: 100\n              },\n              push: {\n                quantity: 4\n              }\n            }\n          },\n          background: {\n            color: \"transparent\"\n          }\n        });\n      } catch (error) {\n        console.error(\"Error loading particles:\", error);\n      }\n    }\n    loadParticles();\n  }, []);\n\n  // Function to send user messages\n  const sendMessage = () => {\n    if (input.trim()) {\n      const sessionID = localStorage.getItem('session_id'); // Get the current session ID\n      const userMessage = {\n        text: input,\n        sender: 'user',\n        timestamp: new Date(),\n        session_id: sessionID\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]); // Add to chat window\n      socket.emit('message', {\n        text: input,\n        session_id: sessionID\n      }); // Send both message and session_id\n      setInput(''); // Clear the input field\n    }\n  };\n\n  // Start a new chat session\n  const startNewChat = () => {\n    setMessages([]); // Clear current messages\n    localStorage.removeItem('session_id'); // Clear stored session ID\n    socket.emit('newSession'); // Notify backend to start a new session\n  };\n\n  // Handle \"Enter\" key press to send messages\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  // Function to format timestamps\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"particles-js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"chat-title\",\n      children: \"Real-Time Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamp\",\n          children: formatTimestamp(msg.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewChat,\n        className: \"new-chat-button\",\n        children: \"New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"DJE7q+N98IeK8wHEm+eAm8es6KI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","loadFull","jsxDEV","_jsxDEV","socket","App","_s","messages","setMessages","input","setInput","messagesEndRef","scrollToLatestMessage","current","scrollIntoView","behavior","storedSessionID","localStorage","getItem","console","log","emit","on","newSessionID","setItem","history","formattedHistory","map","msg","timestamp","Date","off","botMessage","text","sender","prevMessages","loadParticles","tsParticles","load","particles","number","value","color","shape","type","opacity","size","move","enable","speed","direction","outModes","default","interactivity","events","onHover","mode","onClick","modes","repulse","distance","push","quantity","background","error","sendMessage","trim","sessionID","userMessage","session_id","startNewChat","removeItem","handleKeyPress","e","key","formatTimestamp","date","getHours","getMinutes","toString","padStart","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/IntelliJProjects/FullStackProjects/RealTimeChatBot/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { loadFull } from \"tsparticles\";\nimport './App.css';\n\n// Connect to the backend server\nconst socket = io('http://localhost:5000');\n\nfunction App() {\n    const [messages, setMessages] = useState([]); // Store chat messages\n    const [input, setInput] = useState('');       // Store the input message\n    const messagesEndRef = useRef(null);          // Ref for auto-scrolling\n\n    // Function to scroll to the latest message\n    const scrollToLatestMessage = () => {\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    };\n\n    // Scroll to the latest message whenever messages are updated\n    useEffect(() => {\n        scrollToLatestMessage();\n    }, [messages]);\n\n    // Fetch chat history and session management\n    useEffect(() => {\n        const storedSessionID = localStorage.getItem('session_id');\n\n        if (storedSessionID) {\n            console.log('Resuming session with ID:', storedSessionID);\n            socket.emit('resumeSession', storedSessionID); // Notify backend to resume session\n        } else {\n            console.log('No session found, starting a new session');\n            socket.emit('newSession'); // Start a new session\n        }\n\n        socket.on('sessionStarted', (newSessionID) => {\n            console.log('New session started with ID:', newSessionID);\n            localStorage.setItem('session_id', newSessionID); // Save session ID in localStorage\n        });\n\n        socket.on('chatHistory', (history) => {\n            console.log('Chat history received:', history);\n            const formattedHistory = history.map((msg) => ({\n                ...msg,\n                timestamp: new Date(msg.timestamp), // Convert string to Date object\n            }));\n            setMessages(formattedHistory); // Update state with chat history\n        });\n\n        return () => {\n            socket.off('sessionStarted');\n            socket.off('chatHistory');\n        };\n    }, []);\n\n    // Listen for incoming messages from the server\n    useEffect(() => {\n        socket.on('message', (msg) => {\n            console.log('Message received from server:', msg);\n            const botMessage = { text: msg, sender: 'bot', timestamp: new Date() };\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\n        });\n\n        return () => {\n            socket.off('message');\n        };\n    }, []);\n\n    // Particle animation configuration\n    useEffect(() => {\n        async function loadParticles() {\n            try {\n                const tsParticles = await import(\"tsparticles-engine\"); // Import engine\n                const { loadFull } = await import(\"tsparticles\");\n                await loadFull(tsParticles.tsParticles); // Use matching engine and particles\n                tsParticles.tsParticles.load(\"particles-js\", {\n                    particles: {\n                        number: { value: 100 },\n                        color: { value: \"#ffffff\" },\n                        shape: { type: \"circle\" },\n                        opacity: { value: 0.5 },\n                        size: { value: 3 },\n                        move: {\n                            enable: true,\n                            speed: 1,\n                            direction: \"none\",\n                            outModes: { default: \"out\" },\n                        },\n                    },\n                    interactivity: {\n                        events: {\n                            onHover: { enable: true, mode: \"repulse\" },\n                            onClick: { enable: true, mode: \"push\" },\n                        },\n                        modes: {\n                            repulse: { distance: 100 },\n                            push: { quantity: 4 },\n                        },\n                    },\n                    background: {\n                        color: \"transparent\",\n                    },\n                });\n            } catch (error) {\n                console.error(\"Error loading particles:\", error);\n            }\n        }\n\n        loadParticles();\n    }, []);\n\n\n\n\n    // Function to send user messages\n    const sendMessage = () => {\n        if (input.trim()) {\n            const sessionID = localStorage.getItem('session_id'); // Get the current session ID\n            const userMessage = { text: input, sender: 'user', timestamp: new Date(), session_id: sessionID };\n            setMessages((prevMessages) => [...prevMessages, userMessage]); // Add to chat window\n            socket.emit('message', { text: input, session_id: sessionID }); // Send both message and session_id\n            setInput(''); // Clear the input field\n        }\n    };\n\n    // Start a new chat session\n    const startNewChat = () => {\n        setMessages([]); // Clear current messages\n        localStorage.removeItem('session_id'); // Clear stored session ID\n        socket.emit('newSession'); // Notify backend to start a new session\n    };\n\n    // Handle \"Enter\" key press to send messages\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage();\n        }\n    };\n\n    // Function to format timestamps\n    const formatTimestamp = (timestamp) => {\n        const date = new Date(timestamp);\n        return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n    };\n\n    return (\n        <div className=\"chat-container\">\n            {/* Div for Particle Animation */}\n            <div id=\"particles-js\"></div>\n\n            <h1 className=\"chat-title\">Real-Time Chatbot</h1>\n\n            {/* Chat box to display messages */}\n            <div className=\"chat-box\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`chat-message ${msg.sender}`}>\n                        <span>{msg.text}</span>\n                        <div className=\"timestamp\">{formatTimestamp(msg.timestamp)}</div>\n                    </div>\n                ))}\n                <div ref={messagesEndRef} /> {/* Ref for auto-scrolling */}\n            </div>\n\n            {/* Input field to send messages */}\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Type a message...\"\n                    className=\"chat-input\"\n                />\n                <button onClick={sendMessage} className=\"send-button\">Send</button>\n                <button onClick={startNewChat} className=\"new-chat-button\">New Chat</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}