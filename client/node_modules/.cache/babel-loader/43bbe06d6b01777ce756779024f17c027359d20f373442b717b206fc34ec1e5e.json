{"ast":null,"code":"var _jsxFileName = \"C:\\\\IntelliJProjects\\\\FullStackProjects\\\\RealTimeChatBot\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Connect to the backend server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]); // Store chat messages\n  const [input, setInput] = useState(''); // Store the input message\n  const messagesEndRef = useRef(null); // Ref for the end of the message list\n\n  // Function to scroll to the latest message\n  const scrollToLatestMessage = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // Listen for incoming messages from the server\n  useEffect(() => {\n    socket.on('message', msg => {\n      const botMessage = {\n        text: msg,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    });\n    return () => {\n      socket.off('message');\n    };\n  }, []);\n\n  // Scroll to the latest message whenever messages are updated\n  useEffect(() => {\n    scrollToLatestMessage();\n  }, [messages]);\n  useEffect(() => {\n    socket.on('chatHistory', history => {\n      console.log('Chat history received:', history);\n      const formattedHistory = history.map(msg => ({\n        text: msg.text,\n        sender: msg.sender,\n        timestamp: new Date(msg.timestamp) // Convert to Date object\n      }));\n      setMessages(formattedHistory); // Update messages with formatted history\n    });\n    return () => {\n      socket.off('chatHistory');\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('sessionStarted', newSessionID => {\n      console.log('New session started with ID:', newSessionID);\n      // Update state or take action based on the new session ID\n    });\n    return () => {\n      socket.off('sessionStarted'); // Clean up the listener\n    };\n  }, []);\n\n  // Function to send user messages\n  const sendMessage = () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      socket.emit('message', input); // Send the message to the server\n      setInput(''); // Clear the input field\n    }\n  };\n  const startNewChat = () => {\n    setMessages([]); // Clear current messages\n    socket.emit('newSession'); // Inform the backend to start a new session\n  };\n\n  // Handle \"Enter\" key press to send messages\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  // Function to format timestamp\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"chat-title\",\n      children: \"Real-Time Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamp\",\n          children: formatTimestamp(msg.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewChat,\n        children: \"New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"DJE7q+N98IeK8wHEm+eAm8es6KI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","App","_s","messages","setMessages","input","setInput","messagesEndRef","scrollToLatestMessage","current","scrollIntoView","behavior","on","msg","botMessage","text","sender","timestamp","Date","prevMessages","off","history","console","log","formattedHistory","map","newSessionID","sendMessage","trim","userMessage","emit","startNewChat","handleKeyPress","e","key","formatTimestamp","date","getHours","getMinutes","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","type","value","onChange","target","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/IntelliJProjects/FullStackProjects/RealTimeChatBot/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Connect to the backend server\nconst socket = io('http://localhost:5000');\n\nfunction App() {\n    const [messages, setMessages] = useState([]);  // Store chat messages\n    const [input, setInput] = useState('');        // Store the input message\n    const messagesEndRef = useRef(null);           // Ref for the end of the message list\n\n    // Function to scroll to the latest message\n    const scrollToLatestMessage = () => {\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    };\n\n    // Listen for incoming messages from the server\n    useEffect(() => {\n        socket.on('message', (msg) => {\n            const botMessage = { text: msg, sender: 'bot', timestamp: new Date() };\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\n        });\n\n        return () => {\n            socket.off('message');\n        };\n    }, []);\n\n    // Scroll to the latest message whenever messages are updated\n    useEffect(() => {\n        scrollToLatestMessage();\n    }, [messages]);\n\n    useEffect(() => {\n        socket.on('chatHistory', (history) => {\n            console.log('Chat history received:', history);\n            const formattedHistory = history.map((msg) => ({\n                text: msg.text,\n                sender: msg.sender,\n                timestamp: new Date(msg.timestamp), // Convert to Date object\n            }));\n            setMessages(formattedHistory); // Update messages with formatted history\n        });\n\n        return () => {\n            socket.off('chatHistory');\n        };\n    }, []);\n\n    useEffect(() => {\n        socket.on('sessionStarted', (newSessionID) => {\n            console.log('New session started with ID:', newSessionID);\n            // Update state or take action based on the new session ID\n        });\n\n        return () => {\n            socket.off('sessionStarted'); // Clean up the listener\n        };\n    }, []);\n\n\n\n    // Function to send user messages\n    const sendMessage = () => {\n        if (input.trim()) {\n            const userMessage = { text: input, sender: 'user', timestamp: new Date() };\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\n            socket.emit('message', input);  // Send the message to the server\n            setInput('');  // Clear the input field\n        }\n    };\n\n    const startNewChat = () => {\n        setMessages([]); // Clear current messages\n        socket.emit('newSession'); // Inform the backend to start a new session\n    };\n\n\n    // Handle \"Enter\" key press to send messages\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage();\n        }\n    };\n\n    // Function to format timestamp\n    const formatTimestamp = (timestamp) => {\n        const date = new Date(timestamp);\n        return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <h1 className=\"chat-title\">Real-Time Chatbot</h1>\n\n            {/* Chat box to display messages */}\n            <div className=\"chat-box\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`chat-message ${msg.sender}`}>\n                        <span>{msg.text}</span>\n                        <div className=\"timestamp\">{formatTimestamp(msg.timestamp)}</div>\n                    </div>\n                ))}\n                <div ref={messagesEndRef} />  {/* Ref for auto-scrolling */}\n            </div>\n\n            {/* Input field to send messages */}\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Type a message...\"\n                    className=\"chat-input\"\n                />\n                <button onClick={sendMessage} className=\"send-button\">Send</button>\n                <button onClick={startNewChat}>New Chat</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}