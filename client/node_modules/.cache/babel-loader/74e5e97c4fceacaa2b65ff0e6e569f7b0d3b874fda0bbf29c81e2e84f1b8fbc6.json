{"ast":null,"code":"var _jsxFileName = \"C:\\\\IntelliJProjects\\\\FullStackProjects\\\\RealTimeChatBot\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css'; // We'll add some custom CSS for styling\n\n// Connect to the backend server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]); // To store chat messages\n  const [input, setInput] = useState(''); // To track the message input\n\n  // Listen for incoming messages from the server\n  useEffect(() => {\n    socket.on('message', msg => {\n      setMessages(prevMessages => [...prevMessages, msg]);\n    });\n\n    // Clean up the event listener on component unmount\n    return () => {\n      socket.off('message');\n    };\n  }, []);\n\n  // Function to send messages\n  const sendMessage = () => {\n    if (input.trim()) {\n      socket.emit('message', input); // Send the message to the server\n      setInput(''); // Clear the input field\n    }\n  };\n\n  // Handle the Enter key to send messages\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(); // Send the message if Enter is pressed\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message\",\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress // Press Enter to send\n        ,\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","App","_s","messages","setMessages","input","setInput","on","msg","prevMessages","off","sendMessage","trim","emit","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","target","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/IntelliJProjects/FullStackProjects/RealTimeChatBot/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';  // We'll add some custom CSS for styling\n\n// Connect to the backend server\nconst socket = io('http://localhost:5000');\n\nfunction App() {\n    const [messages, setMessages] = useState([]);  // To store chat messages\n    const [input, setInput] = useState('');        // To track the message input\n\n    // Listen for incoming messages from the server\n    useEffect(() => {\n        socket.on('message', (msg) => {\n            setMessages((prevMessages) => [...prevMessages, msg]);\n        });\n\n        // Clean up the event listener on component unmount\n        return () => {\n            socket.off('message');\n        };\n    }, []);\n\n    // Function to send messages\n    const sendMessage = () => {\n        if (input.trim()) {\n            socket.emit('message', input);  // Send the message to the server\n            setInput('');  // Clear the input field\n        }\n    };\n\n    // Handle the Enter key to send messages\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage();  // Send the message if Enter is pressed\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <h1>Real-Time Chatbot</h1>\n\n            {/* Chat box to display messages */}\n            <div className=\"chat-box\">\n                {messages.map((msg, index) => (\n                    <div key={index} className=\"chat-message\">\n                        {msg}\n                    </div>\n                ))}\n            </div>\n\n            {/* Input field to send messages */}\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}  // Press Enter to send\n                    placeholder=\"Type a message...\"\n                    className=\"chat-input\"\n                />\n                <button onClick={sendMessage} className=\"send-button\">Send</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}